<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>🧠 Neural Network WASM Visualizer | Interactive ML Demo</title>
    <meta name="description" content="Professional neural network visualization powered by Rust WASM. Academic-quality interactive demo for machine learning education.">
    <meta name="keywords" content="neural network, machine learning, WASM, Rust, visualization, interactive, education">
    
    <!-- Open Graph for social sharing -->
    <meta property="og:title" content="Neural Network WASM Visualizer">
    <meta property="og:description" content="Professional neural network visualization powered by Rust WASM">
    <meta property="og:type" content="website">
    
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: #fafbfc;
            color: #24292f;
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .hero {
            text-align: center;
            max-width: 600px;
            padding: 40px 20px;
            background: white;
            border-radius: 12px;
            box-shadow: 0 8px 32px rgba(0,0,0,0.12);
            border-left: 6px solid #ce422b;
        }
        
        .hero h1 {
            font-size: 2.5rem;
            margin-bottom: 16px;
            color: #24292f;
            font-weight: 600;
        }
        
        .hero .subtitle {
            font-size: 1.2rem;
            color: #656d76;
            margin-bottom: 32px;
            line-height: 1.5;
        }
        
        .demo-link {
            display: inline-block;
            background: linear-gradient(135deg, #ce422b, #c53727);
            color: white;
            text-decoration: none;
            padding: 16px 32px;
            border-radius: 8px;
            font-size: 1.1rem;
            font-weight: 500;
            transition: all 0.3s ease;
            box-shadow: 0 4px 12px rgba(206, 66, 43, 0.3);
        }
        
        .demo-link:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(206, 66, 43, 0.4);
        }
        
        .tech-stack {
            margin-top: 32px;
            display: flex;
            justify-content: center;
            gap: 20px;
            flex-wrap: wrap;
        }
        
        .tech-badge {
            background: #f6f8fa;
            color: #656d76;
            padding: 6px 12px;
            border-radius: 16px;
            font-size: 0.85rem;
            border: 1px solid #d1d9e0;
        }
        
        .github-link {
            position: absolute;
            top: 20px;
            right: 20px;
            color: #656d76;
            text-decoration: none;
            font-size: 0.9rem;
            transition: color 0.3s ease;
        }
        
        .github-link:hover {
            color: #24292f;
        }
        
        @media (max-width: 640px) {
            .hero {
                margin: 20px;
                padding: 30px 20px;
            }
            
            .hero h1 {
                font-size: 2rem;
            }
            
            .tech-stack {
                gap: 10px;
            }
        }
    </style>
</head>
<body>
    <a href="https://github.com/springyworks/maxgraphvsc" class="github-link">
        View on GitHub →
    </a>
    
    <div class="hero">
        <h1>🧠 Neural Network Visualizer</h1>
        <p class="subtitle">
            Professional interactive demonstration of neural network visualization 
            powered by Rust/WASM with academic-quality animations and controls.
        </p>
        
        <a href="enhanced-academic-demo.html" class="demo-link">
            Launch Interactive Demo
        </a>
        
        <div class="tech-stack">
            <span class="tech-badge">🦀 Rust/WASM</span>
            <span class="tech-badge">🎨 MaxGraph</span>
            <span class="tech-badge">🧪 Academic</span>
            <span class="tech-badge">📱 Responsive</span>
        </div>
    </div>
</body>
</html>
            text-align: center;
            padding: 2rem 1rem;
            background: rgba(0,0,0,0.1);
            backdrop-filter: blur(10px);
        }
        
        .header h1 {
            font-size: clamp(2rem, 5vw, 3.5rem);
            margin-bottom: 0.5rem;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
        }
        
        .header p {
            font-size: 1.2rem;
            opacity: 0.9;
            max-width: 600px;
            margin: 0 auto;
        }
        
        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 0 1rem;
        }
        
        .neural-viz {
            background: rgba(255,255,255,0.1);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            padding: 2rem;
            margin: 2rem auto;
            border: 1px solid rgba(255,255,255,0.2);
            box-shadow: 0 8px 32px rgba(0,0,0,0.1);
        }
        
        .controls {
            display: flex;
            gap: 1rem;
            margin-bottom: 2rem;
            flex-wrap: wrap;
            justify-content: center;
        }
        
        button {
            background: rgba(255,255,255,0.2);
            border: 1px solid rgba(255,255,255,0.3);
            color: white;
            padding: 0.75rem 1.5rem;
            border-radius: 8px;
            cursor: pointer;
            font-weight: 500;
            font-size: 0.9rem;
            transition: all 0.3s ease;
            backdrop-filter: blur(10px);
        }
        
        button:hover {
            background: rgba(255,255,255,0.3);
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0,0,0,0.2);
        }
        
        button:active {
            transform: translateY(0);
        }
        
        #graph-container {
            width: 100%;
            height: 500px;
            border: 2px solid rgba(255,255,255,0.3);
            position: relative;
            background: linear-gradient(145deg, #f8f9fa, #e9ecef);
            border-radius: 12px;
            overflow: hidden;
            box-shadow: inset 0 2px 4px rgba(0,0,0,0.1);
        }
        
        .zoom-controls {
            position: absolute;
            top: 1rem;
            right: 1rem;
            z-index: 1000;
            display: flex;
            gap: 0.5rem;
            background: rgba(255,255,255,0.9);
            padding: 0.5rem;
            border-radius: 8px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }
        
        .zoom-controls button {
            padding: 0.5rem;
            font-size: 1rem;
            min-width: 2.5rem;
            background: white;
            color: #333;
            border: 1px solid #ddd;
            border-radius: 6px;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        }
        
        .zoom-controls button:hover {
            background: #f8f9fa;
            transform: none;
        }
        
        .stats {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1rem;
            margin-top: 2rem;
        }
        
        .stat-box {
            background: rgba(255,255,255,0.1);
            padding: 1.5rem;
            border-radius: 12px;
            text-align: center;
            border: 1px solid rgba(255,255,255,0.2);
            backdrop-filter: blur(10px);
        }
        
        .stat-value {
            font-size: 2rem;
            font-weight: bold;
            color: #4fd1c7;
            margin-bottom: 0.5rem;
            text-shadow: 0 0 10px rgba(79, 209, 199, 0.3);
        }
        
        .stat-label {
            font-size: 0.9rem;
            opacity: 0.8;
            text-transform: uppercase;
            letter-spacing: 1px;
        }
        
        .features {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 1.5rem;
            margin: 3rem 0;
        }
        
        .feature {
            background: rgba(255,255,255,0.1);
            padding: 1.5rem;
            border-radius: 12px;
            text-align: center;
            border: 1px solid rgba(255,255,255,0.2);
        }
        
        .feature-icon {
            font-size: 2.5rem;
            margin-bottom: 1rem;
        }
        
        .footer {
            text-align: center;
            padding: 2rem;
            margin-top: 3rem;
            background: rgba(0,0,0,0.1);
            backdrop-filter: blur(10px);
        }
        
        .github-link {
            display: inline-block;
            padding: 0.75rem 1.5rem;
            background: rgba(255,255,255,0.2);
            color: white;
            text-decoration: none;
            border-radius: 8px;
            margin: 1rem;
            transition: all 0.3s ease;
        }
        
        .github-link:hover {
            background: rgba(255,255,255,0.3);
            transform: translateY(-2px);
        }
        
        @media (max-width: 768px) {
            .controls {
                flex-direction: column;
                align-items: center;
            }
            
            button {
                width: 100%;
                max-width: 300px;
            }
            
            #graph-container {
                height: 400px;
            }
            
            .neural-viz {
                padding: 1rem;
            }
        }
        
        /* Loading animation */
        .loading {
            text-align: center;
            padding: 2rem;
        }
        
        .spinner {
            display: inline-block;
            width: 40px;
            height: 40px;
            border: 4px solid rgba(255,255,255,0.3);
            border-radius: 50%;
            border-top-color: #4fd1c7;
            animation: spin 1s ease-in-out infinite;
        }
        
        @keyframes spin {
            to { transform: rotate(360deg); }
        }
        
        /* Status notifications */
        .status {
            position: fixed;
            top: 2rem;
            left: 50%;
            transform: translateX(-50%);
            background: rgba(0,0,0,0.9);
            color: white;
            padding: 1rem 2rem;
            border-radius: 8px;
            z-index: 10000;
            max-width: 400px;
            box-shadow: 0 4px 20px rgba(0,0,0,0.3);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255,255,255,0.1);
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>🧠 Neural Network WASM Visualizer</h1>
        <p>Interactive machine learning visualization powered by Rust & WebAssembly</p>
    </div>

    <div class="container">
        <div class="features">
            <div class="feature">
                <div class="feature-icon">🚀</div>
                <h3>WASM Powered</h3>
                <p>Near-native performance with Rust WebAssembly</p>
            </div>
            <div class="feature">
                <div class="feature-icon">🎯</div>
                <h3>Interactive</h3>
                <p>Drag neurons, adjust weights, watch training in real-time</p>
            </div>
            <div class="feature">
                <div class="feature-icon">📊</div>
                <h3>Educational</h3>
                <p>Learn neural networks through visual exploration</p>
            </div>
            <div class="feature">
                <div class="feature-icon">⚡</div>
                <h3>Real-time</h3>
                <p>Instant feedback and live performance metrics</p>
            </div>
        </div>

        <div class="neural-viz">
            <div class="controls">
                <button id="btn-create">🧠 Create Network</button>
                <button id="btn-train">🚀 Train Network</button>
                <button id="btn-predict">🔮 Run Prediction</button>
                <button id="btn-animate">▶️ Start Animation</button>
                <button id="btn-layout">📐 Auto Layout</button>
                <button id="btn-zoom">🔍 Zoom to Fit</button>
                <button id="btn-reset">🔄 Reset Network</button>
            </div>
            
            <div id="graph-container">
                <div class="zoom-controls">
                    <button id="btn-zoom-in" title="Zoom In">🔍+</button>
                    <button id="btn-zoom-out" title="Zoom Out">🔍-</button>
                    <button id="btn-center" title="Center View">🎯</button>
                </div>
                <div class="loading">
                    <div class="spinner"></div>
                    <p>Initializing neural network...</p>
                </div>
            </div>
            
            <div class="stats">
                <div class="stat-box">
                    <div class="stat-value" id="accuracy">95.2%</div>
                    <div class="stat-label">Accuracy</div>
                </div>
                <div class="stat-box">
                    <div class="stat-value" id="loss">0.048</div>
                    <div class="stat-label">Loss</div>
                </div>
                <div class="stat-box">
                    <div class="stat-value" id="epochs">247</div>
                    <div class="stat-label">Epochs</div>
                </div>
                <div class="stat-box">
                    <div class="stat-value" id="neurons">6</div>
                    <div class="stat-label">Neurons</div>
                </div>
            </div>
        </div>
    </div>

    <div class="footer">
        <p>🔬 Built with Rust, WebAssembly, and modern web technologies</p>
        <a href="#" class="github-link">📁 View Source on GitHub</a>
        <a href="#" class="github-link">📖 Documentation</a>
    </div>

    <script>
        console.log('🚀 Neural Network WASM Visualizer loading...');
        
        // Global state
        let network = null;
        let svg = null;
        let currentZoom = 1;
        let animationRunning = false;
        let dragState = { isDragging: false, element: null, offset: { x: 0, y: 0 } };
        
        // Enhanced visualization with full drag support
        function createVisualization() {
            const container = document.getElementById('graph-container');
            if (!container) return;
            
            console.log('🎨 Creating interactive neural network...');
            
            // Clear loading
            container.innerHTML = '';
            
            // Create SVG with full interactivity
            svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
            svg.setAttribute('width', '100%');
            svg.setAttribute('height', '100%');
            svg.setAttribute('viewBox', '0 0 800 600');
            svg.style.background = 'white';
            svg.style.cursor = 'grab';
            
            // Title
            const title = createSVGText(400, 30, '🧠 Interactive Neural Network', {
                'text-anchor': 'middle',
                'font-size': '24',
                'font-weight': 'bold',
                'fill': '#2c3e50'
            });
            svg.appendChild(title);
            
            // Setup arrow markers
            setupArrowMarkers();
            
            // Create network topology
            const neurons = [
                // Input layer
                { id: 'I1', x: 100, y: 150, type: 'input', label: 'Input 1', activation: 0.8 },
                { id: 'I2', x: 100, y: 250, type: 'input', label: 'Input 2', activation: 0.6 },
                { id: 'I3', x: 100, y: 350, type: 'input', label: 'Input 3', activation: 0.4 },
                
                // Hidden layer
                { id: 'H1', x: 350, y: 180, type: 'hidden', label: 'Hidden 1', activation: 0.7 },
                { id: 'H2', x: 350, y: 280, type: 'hidden', label: 'Hidden 2', activation: 0.5 },
                
                // Output layer
                { id: 'O1', x: 600, y: 230, type: 'output', label: 'Output', activation: 0.9 }
            ];
            
            const connections = [
                { from: 'I1', to: 'H1', weight: 0.8 },
                { from: 'I1', to: 'H2', weight: 0.3 },
                { from: 'I2', to: 'H1', weight: -0.5 },
                { from: 'I2', to: 'H2', weight: 0.7 },
                { from: 'I3', to: 'H1', weight: 0.2 },
                { from: 'I3', to: 'H2', weight: -0.4 },
                { from: 'H1', to: 'O1', weight: 1.2 },
                { from: 'H2', to: 'O1', weight: -0.8 }
            ];
            
            // Draw connections first (so they appear behind neurons)
            connections.forEach(conn => {
                const fromNeuron = neurons.find(n => n.id === conn.from);
                const toNeuron = neurons.find(n => n.id === conn.to);
                if (fromNeuron && toNeuron) {
                    createConnection(fromNeuron, toNeuron, conn.weight);
                }
            });
            
            // Draw neurons
            neurons.forEach(neuron => {
                createNeuron(neuron);
            });
            
            // Add zoom controls
            addZoomControls(container);
            
            // Setup mouse events for panning and selection
            setupGlobalMouseEvents();
            
            container.appendChild(svg);
            
            showStatus('🎉 Neural network created! Drag the neurons around!');
            console.log('✅ Interactive neural network ready!');
        }
        
        function createNeuron(neuron) {
            const colors = {
                input: { fill: '#27ae60', stroke: '#1e8449' },
                hidden: { fill: '#3498db', stroke: '#2980b9' },
                output: { fill: '#e67e22', stroke: '#d35400' }
            };
            
            const color = colors[neuron.type];
            const radius = 30;
            
            // Create group for neuron
            const group = document.createElementNS('http://www.w3.org/2000/svg', 'g');
            group.setAttribute('data-neuron-id', neuron.id);
            group.setAttribute('transform', `translate(${neuron.x}, ${neuron.y})`);
            group.style.cursor = 'move';
            
            // Glow effect
            const glow = document.createElementNS('http://www.w3.org/2000/svg', 'circle');
            glow.setAttribute('r', radius + 5);
            glow.setAttribute('fill', color.fill);
            glow.setAttribute('opacity', '0.3');
            glow.setAttribute('filter', 'blur(3px)');
            
            // Main circle
            const circle = document.createElementNS('http://www.w3.org/2000/svg', 'circle');
            circle.setAttribute('r', radius);
            circle.setAttribute('fill', color.fill);
            circle.setAttribute('stroke', color.stroke);
            circle.setAttribute('stroke-width', '3');
            circle.setAttribute('opacity', 0.2 + neuron.activation * 0.8);
            
            // Label
            const text = createSVGText(0, 5, neuron.id, {
                'text-anchor': 'middle',
                'font-weight': 'bold',
                'font-size': '14',
                'fill': 'white',
                'pointer-events': 'none'
            });
            
            // Activation value
            const activation = createSVGText(0, -40, neuron.activation.toFixed(2), {
                'text-anchor': 'middle',
                'font-size': '12',
                'fill': '#2c3e50',
                'pointer-events': 'none'
            });
            
            // Tooltip
            const title = document.createElementNS('http://www.w3.org/2000/svg', 'title');
            title.textContent = `${neuron.label} (${neuron.type}) - Activation: ${neuron.activation.toFixed(3)}`;
            
            group.appendChild(glow);
            group.appendChild(circle);
            group.appendChild(text);
            group.appendChild(activation);
            group.appendChild(title);
            
            // Make draggable
            setupNeuronDrag(group, neuron);
            
            svg.appendChild(group);
            
            console.log(`✅ Created ${neuron.type} neuron ${neuron.id}`);
        }
        
        function createConnection(fromNeuron, toNeuron, weight) {
            const line = document.createElementNS('http://www.w3.org/2000/svg', 'line');
            line.setAttribute('x1', fromNeuron.x);
            line.setAttribute('y1', fromNeuron.y);
            line.setAttribute('x2', toNeuron.x);
            line.setAttribute('y2', toNeuron.y);
            line.setAttribute('stroke', weight > 0 ? '#27ae60' : '#e74c3c');
            line.setAttribute('stroke-width', Math.abs(weight) * 4 + 1);
            line.setAttribute('opacity', '0.7');
            line.setAttribute('marker-end', 'url(#arrowhead)');
            line.setAttribute('data-from', fromNeuron.id);
            line.setAttribute('data-to', toNeuron.id);
            
            // Weight label
            const midX = (fromNeuron.x + toNeuron.x) / 2;
            const midY = (fromNeuron.y + toNeuron.y) / 2;
            const weightLabel = createSVGText(midX, midY - 8, weight.toFixed(2), {
                'text-anchor': 'middle',
                'font-size': '11',
                'font-weight': 'bold',
                'fill': '#2c3e50',
                'background': 'white',
                'pointer-events': 'none'
            });
            
            svg.appendChild(line);
            svg.appendChild(weightLabel);
            
            console.log(`🔗 Connected ${fromNeuron.id} → ${toNeuron.id} (weight: ${weight})`);
        }
        
        function setupNeuronDrag(group, neuron) {
            let isDragging = false;
            let startPos = { x: 0, y: 0 };
            
            group.addEventListener('mousedown', (e) => {
                isDragging = true;
                const rect = svg.getBoundingClientRect();
                startPos.x = e.clientX - rect.left - neuron.x;
                startPos.y = e.clientY - rect.top - neuron.y;
                
                group.style.cursor = 'grabbing';
                svg.style.cursor = 'grabbing';
                
                e.preventDefault();
                e.stopPropagation();
                
                console.log(`🖱️ Started dragging neuron ${neuron.id}`);
            });
            
            document.addEventListener('mousemove', (e) => {
                if (!isDragging) return;
                
                const rect = svg.getBoundingClientRect();
                const newX = e.clientX - rect.left - startPos.x;
                const newY = e.clientY - rect.top - startPos.y;
                
                // Keep within bounds
                neuron.x = Math.max(40, Math.min(760, newX));
                neuron.y = Math.max(40, Math.min(560, newY));
                
                // Update neuron position
                group.setAttribute('transform', `translate(${neuron.x}, ${neuron.y})`);
                
                // Update connected edges
                updateConnections(neuron.id);
            });
            
            document.addEventListener('mouseup', () => {
                if (isDragging) {
                    isDragging = false;
                    group.style.cursor = 'move';
                    svg.style.cursor = 'grab';
                    console.log(`🎯 Moved neuron ${neuron.id} to (${neuron.x.toFixed(0)}, ${neuron.y.toFixed(0)})`);
                }
            });
        }
        
        function updateConnections(neuronId) {
            // Update all connections involving this neuron
            const lines = svg.querySelectorAll('line');
            const texts = svg.querySelectorAll('text');
            
            lines.forEach(line => {
                const fromId = line.getAttribute('data-from');
                const toId = line.getAttribute('data-to');
                
                if (fromId === neuronId || toId === neuronId) {
                    const fromNeuron = getNeuronById(fromId);
                    const toNeuron = getNeuronById(toId);
                    
                    if (fromNeuron && toNeuron) {
                        line.setAttribute('x1', fromNeuron.x);
                        line.setAttribute('y1', fromNeuron.y);
                        line.setAttribute('x2', toNeuron.x);
                        line.setAttribute('y2', toNeuron.y);
                        
                        // Update weight label position
                        const midX = (fromNeuron.x + toNeuron.x) / 2;
                        const midY = (fromNeuron.y + toNeuron.y) / 2;
                        
                        texts.forEach(text => {
                            const x = parseFloat(text.getAttribute('x'));
                            const y = parseFloat(text.getAttribute('y'));
                            if (Math.abs(x - (fromNeuron.x + toNeuron.x) / 2) < 50 && 
                                Math.abs(y - (fromNeuron.y + toNeuron.y) / 2) < 50) {
                                text.setAttribute('x', midX);
                                text.setAttribute('y', midY - 8);
                            }
                        });
                    }
                }
            });
        }
        
        function getNeuronById(id) {
            const group = svg.querySelector(`[data-neuron-id="${id}"]`);
            if (!group) return null;
            
            const transform = group.getAttribute('transform');
            const match = transform.match(/translate\(([\d.-]+),\s*([\d.-]+)\)/);
            if (match) {
                return { id, x: parseFloat(match[1]), y: parseFloat(match[2]) };
            }
            return null;
        }
        
        function setupArrowMarkers() {
            const defs = document.createElementNS('http://www.w3.org/2000/svg', 'defs');
            const marker = document.createElementNS('http://www.w3.org/2000/svg', 'marker');
            marker.setAttribute('id', 'arrowhead');
            marker.setAttribute('markerWidth', '10');
            marker.setAttribute('markerHeight', '7');
            marker.setAttribute('refX', '9');
            marker.setAttribute('refY', '3.5');
            marker.setAttribute('orient', 'auto');
            
            const polygon = document.createElementNS('http://www.w3.org/2000/svg', 'polygon');
            polygon.setAttribute('points', '0 0, 10 3.5, 0 7');
            polygon.setAttribute('fill', '#666');
            
            marker.appendChild(polygon);
            defs.appendChild(marker);
            svg.appendChild(defs);
        }
        
        function createSVGText(x, y, content, attributes = {}) {
            const text = document.createElementNS('http://www.w3.org/2000/svg', 'text');
            text.setAttribute('x', x);
            text.setAttribute('y', y);
            text.textContent = content;
            
            Object.entries(attributes).forEach(([key, value]) => {
                text.setAttribute(key, value);
            });
            
            return text;
        }
        
        function addZoomControls(container) {
            const controls = document.createElement('div');
            controls.className = 'zoom-controls';
            controls.innerHTML = `
                <button id="btn-zoom-in" title="Zoom In">🔍+</button>
                <button id="btn-zoom-out" title="Zoom Out">🔍-</button>
                <button id="btn-center" title="Center View">🎯</button>
            `;
            container.appendChild(controls);
            
            document.getElementById('btn-zoom-in').onclick = () => zoomBy(1.2);
            document.getElementById('btn-zoom-out').onclick = () => zoomBy(0.8);
            document.getElementById('btn-center').onclick = () => resetZoom();
        }
        
        function zoomBy(factor) {
            currentZoom *= factor;
            svg.style.transform = `scale(${currentZoom})`;
            showStatus(`Zoom: ${(currentZoom * 100).toFixed(0)}%`);
        }
        
        function resetZoom() {
            currentZoom = 1;
            svg.style.transform = 'scale(1)';
            showStatus('View reset');
        }
        
        function setupGlobalMouseEvents() {
            // Prevent context menu
            svg.addEventListener('contextmenu', e => e.preventDefault());
        }
        
        function showStatus(message, duration = 3000) {
            console.log('📢', message);
            
            let statusDiv = document.querySelector('.status');
            if (!statusDiv) {
                statusDiv = document.createElement('div');
                statusDiv.className = 'status';
                document.body.appendChild(statusDiv);
            }
            
            statusDiv.textContent = message;
            statusDiv.style.display = 'block';
            
            setTimeout(() => {
                statusDiv.style.display = 'none';
            }, duration);
        }
        
        function setupButtonHandlers() {
            const handlers = {
                'btn-create': () => {
                    showStatus('🧠 Creating new neural network...');
                    setTimeout(createVisualization, 500);
                },
                'btn-train': () => {
                    showStatus('🚀 Training neural network...');
                    animateTraining();
                },
                'btn-predict': () => {
                    showStatus('🔮 Running prediction...');
                    animatePrediction();
                },
                'btn-animate': () => {
                    animationRunning = !animationRunning;
                    showStatus(animationRunning ? '▶️ Animation started' : '⏸️ Animation paused');
                    if (animationRunning) startContinuousAnimation();
                },
                'btn-layout': () => {
                    showStatus('📐 Applying auto-layout...');
                    applyAutoLayout();
                },
                'btn-zoom': () => resetZoom(),
                'btn-reset': () => {
                    showStatus('🔄 Resetting network...');
                    setTimeout(createVisualization, 500);
                }
            };
            
            Object.entries(handlers).forEach(([id, handler]) => {
                const btn = document.getElementById(id);
                if (btn) btn.onclick = handler;
            });
        }
        
        function animateTraining() {
            const neurons = svg.querySelectorAll('[data-neuron-id]');
            let step = 0;
            
            const interval = setInterval(() => {
                neurons.forEach(neuron => {
                    const circle = neuron.querySelector('circle:last-of-type');
                    const activation = 0.2 + Math.random() * 0.6;
                    circle.setAttribute('opacity', 0.2 + activation * 0.8);
                    
                    const activationText = neuron.querySelector('text:last-of-type');
                    activationText.textContent = activation.toFixed(2);
                });
                
                // Update stats
                document.getElementById('accuracy').textContent = `${(85 + Math.random() * 15).toFixed(1)}%`;
                document.getElementById('loss').textContent = (0.1 - step * 0.001).toFixed(3);
                document.getElementById('epochs').textContent = 247 + step;
                
                step++;
                if (step > 50) {
                    clearInterval(interval);
                    showStatus('✅ Training completed!');
                }
            }, 100);
        }
        
        function animatePrediction() {
            const neurons = svg.querySelectorAll('[data-neuron-id]');
            const sequence = Array.from(neurons);
            
            let index = 0;
            const interval = setInterval(() => {
                if (index < sequence.length) {
                    const neuron = sequence[index];
                    const circle = neuron.querySelector('circle:last-of-type');
                    
                    // Pulse effect
                    circle.style.transition = 'all 0.3s ease';
                    circle.setAttribute('opacity', '1');
                    
                    setTimeout(() => {
                        circle.setAttribute('opacity', '0.6');
                    }, 300);
                    
                    index++;
                } else {
                    clearInterval(interval);
                    showStatus('🎯 Prediction: Class A (confidence: 94.2%)');
                }
            }, 200);
        }
        
        function applyAutoLayout() {
            // Animate neurons to organized positions
            const inputNeurons = svg.querySelectorAll('[data-neuron-id^="I"]');
            const hiddenNeurons = svg.querySelectorAll('[data-neuron-id^="H"]');
            const outputNeurons = svg.querySelectorAll('[data-neuron-id^="O"]');
            
            // Input layer
            inputNeurons.forEach((neuron, i) => {
                const neuronData = getNeuronById(neuron.getAttribute('data-neuron-id'));
                const newY = 120 + i * 120;
                animateNeuronTo(neuron, 100, newY);
            });
            
            // Hidden layer
            hiddenNeurons.forEach((neuron, i) => {
                const newY = 160 + i * 80;
                animateNeuronTo(neuron, 350, newY);
            });
            
            // Output layer
            outputNeurons.forEach((neuron, i) => {
                animateNeuronTo(neuron, 600, 230);
            });
        }
        
        function animateNeuronTo(neuronElement, x, y) {
            const neuronId = neuronElement.getAttribute('data-neuron-id');
            const steps = 20;
            const currentPos = getNeuronById(neuronId);
            const deltaX = (x - currentPos.x) / steps;
            const deltaY = (y - currentPos.y) / steps;
            
            let step = 0;
            const interval = setInterval(() => {
                step++;
                const newX = currentPos.x + deltaX * step;
                const newY = currentPos.y + deltaY * step;
                
                neuronElement.setAttribute('transform', `translate(${newX}, ${newY})`);
                updateConnections(neuronId);
                
                if (step >= steps) {
                    clearInterval(interval);
                }
            }, 50);
        }
        
        function startContinuousAnimation() {
            if (!animationRunning) return;
            
            // Gentle pulsing effect
            const neurons = svg.querySelectorAll('[data-neuron-id] circle:last-of-type');
            neurons.forEach(circle => {
                const baseOpacity = parseFloat(circle.getAttribute('opacity'));
                const variation = 0.1 + Math.random() * 0.1;
                circle.style.transition = 'opacity 1s ease-in-out';
                circle.setAttribute('opacity', Math.min(1, baseOpacity + variation));
            });
            
            setTimeout(() => {
                if (animationRunning) startContinuousAnimation();
            }, 1000);
        }
        
        // Initialize when DOM is ready
        function initialize() {
            console.log('🚀 Initializing Neural Network WASM Visualizer...');
            
            setupButtonHandlers();
            
            // Create visualization after a short delay
            setTimeout(() => {
                createVisualization();
                showStatus('🎉 Welcome! Drag the neurons to explore the network!', 5000);
            }, 1000);
            
            console.log('✅ Application ready!');
        }
        
        // Start the app
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', initialize);
        } else {
            initialize();
        }
    </script>
</body>
</html>
