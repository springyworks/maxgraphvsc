// The module 'vscode' contains the VS Code extensibility API
// Import the module and reference it with the alias vscode in your code below
import * as vscode from 'vscode';

// This method is called when your extension is activated
// Your extension is activated the very first time the command is executed
export function activate(context: vscode.ExtensionContext) {

	// Use the console to output diagnostic information (console.log) and errors (console.error)
	// This line of code will only be executed once when your extension is activated
	console.log('✨ MaxGraphVSC extension activated! Sidebar version with rubberbanding! ✨');
	console.log('🔧 Extension Context:', {
		extensionPath: context.extensionPath,
		subscriptions: context.subscriptions.length,
		timestamp: new Date().toISOString()
	});

	// Create persistent output channel for better logging
	const outputChannel = vscode.window.createOutputChannel('MaxGraphVSC Debug');
	outputChannel.appendLine('=== MaxGraphVSC Extension Activation ===');
	outputChannel.appendLine(`✅ Activated at: ${new Date().toISOString()}`);
	outputChannel.appendLine(`📁 Extension Path: ${context.extensionPath}`);
	outputChannel.appendLine('🚀 Ready for neural network visualization!');
	
	// AUTO-OPEN: Automatically open the neural network visualization
	setTimeout(() => {
		console.log('🎯 Auto-opening neural network panel...');
		outputChannel.appendLine('🎯 Auto-opening neural network panel...');
		
		createNeuralNetworkPanel(context);
		vscode.window.showInformationMessage('🎯 SIDEBAR EDITION: Neural Network with MaxGraph-inspired toolbar!');
		
		console.log('✅ Neural network panel opened successfully');
		outputChannel.appendLine('✅ Neural network panel opened successfully');
	}, 1000); // Small delay to ensure extension is fully loaded

	// The command has been defined in the package.json file
	// Now provide the implementation of the command with registerCommand
	// The commandId parameter must match the command field in package.json
	const disposable = vscode.commands.registerCommand('maxgraphvsc.helloWorldGreeting', () => {
		// The code you place here will be executed every time your command is executed
		// Display multiple types of notifications to make it more visible
		vscode.window.showInformationMessage('🚀 Hello World from maxgraphVSC! Extension is working! 🎉');
		vscode.window.showWarningMessage('⚠️ MaxGraph VSC Extension - Hello World Test Successful!');
		
		// Also log to console and output channel for debugging
		console.log('MaxGraphVSC: Hello World command executed successfully!');
		
		// Create an output channel for better visibility
		const outputChannel = vscode.window.createOutputChannel('MaxGraphVSC');
		outputChannel.appendLine('=== MaxGraphVSC Extension ===');
		outputChannel.appendLine('Hello World command executed at: ' + new Date().toISOString());
		outputChannel.appendLine('Extension is working properly!');
		outputChannel.show(true);
	});

	context.subscriptions.push(disposable);

	// Add a second command that's more visible
	const testCommand = vscode.commands.registerCommand('maxgraphvsc.testExtensionFunctionality', async () => {
		const result = await vscode.window.showInformationMessage(
			'🧠 MaxGraphVSC Neural Network Extension is Ready!', 
			{ modal: true },
			'Open Output', 
			'Test Complete'
		);
		
		if (result === 'Open Output') {
			const outputChannel = vscode.window.createOutputChannel('MaxGraphVSC Debug');
			outputChannel.appendLine('🔥 MaxGraphVSC Extension Test Results:');
			outputChannel.appendLine('✅ Extension loaded successfully');
			outputChannel.appendLine('✅ Commands registered properly');
			outputChannel.appendLine('✅ Ready for neural network visualization!');
			outputChannel.appendLine('');
			outputChannel.appendLine('Next steps:');
			outputChannel.appendLine('- Add MaxGraph library');
			outputChannel.appendLine('- Create WebView panel');
			outputChannel.appendLine('- Connect to Rust burn profiler');
			outputChannel.show(true);
		}
	});

	context.subscriptions.push(testCommand);

	// Add neural network visualization command
	const neuralNetCommand = vscode.commands.registerCommand('maxgraphvsc.openNeuralNetworkVisualizationPanel', () => {
		createNeuralNetworkPanel(context);
		vscode.window.showInformationMessage('🧠 Neural Network Visualization panel opened!');
	});

	context.subscriptions.push(neuralNetCommand);
}

// Add neural network visualization functionality
function createNeuralNetworkPanel(context: vscode.ExtensionContext): vscode.WebviewPanel {
	console.log('🧠 Creating neural network panel...');
	
	const panel = vscode.window.createWebviewPanel(
		'neuralNetworkViz',
		'🧠 Neural Network Visualization',
		vscode.ViewColumn.One,
		{
			enableScripts: true,
			retainContextWhenHidden: true,
			localResourceRoots: [vscode.Uri.joinPath(context.extensionUri, 'media')]
		}
	);

	console.log('🔧 Panel created, setting up webview content...');
	panel.webview.html = getNeuralNetworkWebviewContent(panel.webview, context.extensionUri);
	
	// Watch for file changes and auto-refresh webview
	const watcher = vscode.workspace.createFileSystemWatcher('**/src/extension.ts');
	watcher.onDidChange(() => {
		console.log('🔄 File change detected, refreshing webview...');
		panel.webview.html = getNeuralNetworkWebviewContent(panel.webview, context.extensionUri);
		console.log('🔄 Neural Network panel auto-refreshed!');
	});
	
	// Clean up watcher when panel is disposed
	panel.onDidDispose(() => {
		console.log('🧹 Neural network panel disposed, cleaning up...');
		watcher.dispose();
	});
	
	console.log('✅ Neural network panel setup complete!');
	return panel;
}

function getNeuralNetworkWebviewContent(webview: vscode.Webview, extensionUri: vscode.Uri): string {
	// Generate nonce for CSP
	const nonce = Math.random().toString(36).substring(2, 15);
	
	// Get paths to WASM files
	const wasmUri = webview.asWebviewUri(vscode.Uri.joinPath(extensionUri, 'neural-wasm', 'pkg', 'neural_wasm_bg.wasm'));
	const wasmJsUri = webview.asWebviewUri(vscode.Uri.joinPath(extensionUri, 'neural-wasm', 'pkg', 'neural_wasm.js'));
	
	return `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="Content-Security-Policy" content="default-src 'none'; 
        style-src 'unsafe-inline' ${webview.cspSource}; 
        script-src 'nonce-${nonce}' 'unsafe-eval' ${webview.cspSource}; 
        wasm-src ${webview.cspSource};">
    <title>🦀 Neural Network Visualization (WASM)</title>
    <script src="https://unpkg.com/@maxgraph/core@0.10.2/dist/maxgraph.min.js" nonce="${nonce}"></script>
    <style>
        body {
            margin: 0;
            padding: 0;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: var(--vscode-editor-background);
            color: var(--vscode-editor-foreground);
            display: flex;
            height: 100vh;
        }
        
        .sidebar {
            width: 200px;
            background-color: var(--vscode-sideBar-background);
            border-right: 1px solid var(--vscode-sideBar-border);
            padding: 10px;
            overflow-y: auto;
        }
        
        .main-content {
            flex: 1;
            display: flex;
            flex-direction: column;
        }
        
        .toolbar {
            height: 40px;
            background-color: var(--vscode-editor-background);
            border-bottom: 1px solid var(--vscode-panel-border);
            display: flex;
            align-items: center;
            padding: 0 10px;
            gap: 10px;
        }
        
        .graph-container {
            flex: 1;
            position: relative;
            background-color: var(--vscode-editor-background);
        }
        
        .status-bar {
            height: 24px;
            background-color: var(--vscode-statusBar-background);
            color: var(--vscode-statusBar-foreground);
            display: flex;
            align-items: center;
            padding: 0 10px;
            font-size: 12px;
        }
        
        .sidebar-section {
            margin-bottom: 15px;
        }
        
        .sidebar-title {
            font-weight: bold;
            margin-bottom: 8px;
            font-size: 13px;
            color: var(--vscode-sideBarTitle-foreground);
        }
        
        .neuron-item, .action-item {
            display: flex;
            flex-direction: column;
            align-items: center;
            padding: 8px;
            margin: 4px 0;
            background-color: var(--vscode-list-hoverBackground);
            border-radius: 4px;
            cursor: pointer;
            transition: background-color 0.2s;
        }
        
        .neuron-item:hover, .action-item:hover {
            background-color: var(--vscode-list-activeSelectionBackground);
        }
        
        .neuron-symbol {
            width: 24px;
            height: 24px;
            border-radius: 50%;
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            font-size: 12px;
            margin-bottom: 4px;
        }
        
        .neuron-label, .action-label {
            font-size: 10px;
            text-align: center;
            line-height: 1.2;
        }
        
        .toolbar-btn {
            padding: 4px 8px;
            background-color: var(--vscode-button-background);
            color: var(--vscode-button-foreground);
            border: none;
            border-radius: 3px;
            cursor: pointer;
            font-size: 11px;
        }
        
        .toolbar-btn:hover {
            background-color: var(--vscode-button-hoverBackground);
        }
        
        .loading {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            text-align: center;
            color: var(--vscode-editor-foreground);
        }
        
        .error {
            color: var(--vscode-errorForeground);
            background-color: var(--vscode-inputValidation-errorBackground);
            padding: 10px;
            border-radius: 4px;
            margin: 10px;
        }
    </style>
</head>
<body>
    <div class="sidebar">
        <div class="sidebar-section">
            <div class="sidebar-title">🧠 Neurons</div>
            <div class="neuron-item" data-type="input">
                <div class="neuron-symbol" style="background: #4CAF50;">I</div>
                <div class="neuron-label">Input</div>
            </div>
            <div class="neuron-item" data-type="hidden">
                <div class="neuron-symbol" style="background: #2196F3;">H</div>
                <div class="neuron-label">Hidden</div>
            </div>
            <div class="neuron-item" data-type="output">
                <div class="neuron-symbol" style="background: #FF9800;">O</div>
                <div class="neuron-label">Output</div>
            </div>
        </div>
        
        <div class="sidebar-section">
            <div class="sidebar-title">🎯 Actions</div>
            <div class="action-item" data-action="sample">
                <div style="font-size: 16px; margin-bottom: 4px;">🎯</div>
                <div class="action-label">Sample Network</div>
            </div>
            <div class="action-item" data-action="clear">
                <div style="font-size: 16px; margin-bottom: 4px;">🧹</div>
                <div class="action-label">Clear</div>
            </div>
            <div class="action-item" data-action="animate">
                <div style="font-size: 16px; margin-bottom: 4px;">⚡</div>
                <div class="action-label">Animate</div>
            </div>
            <div class="action-item" data-action="orbital">
                <div style="font-size: 16px; margin-bottom: 4px;">🌌</div>
                <div class="action-label">Orbital Dance</div>
            </div>
        </div>
    </div>
    
    <div class="main-content">
        <div class="toolbar">
            <button class="toolbar-btn" id="zoomInBtn">🔍+</button>
            <button class="toolbar-btn" id="zoomOutBtn">🔍-</button>
            <button class="toolbar-btn" id="fitBtn">📐 Fit</button>
            <button class="toolbar-btn" id="exportBtn">💾 Export</button>
        </div>
        
        <div class="graph-container" id="graphContainer">
            <div class="loading">
                <h3>🦀 Loading Neural Network WASM Engine...</h3>
                <p>Initializing Rust-powered neural network visualization</p>
            </div>
        </div>
        
        <div class="status-bar">
            <span id="statusText">🦀 WASM Neural Network Engine Ready</span>
            <span style="margin-left: auto;" id="statsText">Nodes: 0  Edges: 0</span>
        </div>
    </div>

    <script type="module" nonce="${nonce}">
        // Import the WASM module
        import init, { NeuralNetwork } from '${wasmJsUri}';
        
        let wasmNetwork = null;
        let graph = null;
        let maxGraphCells = new Map(); // Map WASM neuron IDs to MaxGraph cells
        let animationId = null;
        
        async function initializeApp() {
            try {
                // Initialize WASM
                await init('${wasmUri}');
                console.log('🦀 WASM Neural Network Engine loaded!');
                
                // Create WASM neural network
                wasmNetwork = new NeuralNetwork();
                
                // Initialize MaxGraph
                if (typeof window.mxGraph !== 'undefined') {
                    initializeMaxGraph();
                } else {
                    // Fallback if MaxGraph fails to load
                    document.getElementById('graphContainer').innerHTML = 
                        '<div class="error">❌ MaxGraph failed to load. Using WASM-only mode.</div>';
                }
                
                // Set up event listeners
                setupEventListeners();
                
                // Update status
                document.getElementById('statusText').textContent = '🚀 WASM + MaxGraph Ready!';
                
            } catch (error) {
                console.error('💥 Failed to initialize:', error);
                document.getElementById('graphContainer').innerHTML = 
                    \`<div class="error">💥 Initialization failed: \${error.message}</div>\`;
            }
        }
        
        function initializeMaxGraph() {
            const { mxGraph, mxRubberband } = window;
            const container = document.getElementById('graphContainer');
            
            // Create graph
            graph = new mxGraph(container);
            graph.setConnectable(true);
            graph.setDropEnabled(true);
            
            // Enable rubber band selection
            new mxRubberband(graph);
            
            console.log('📊 MaxGraph initialized successfully');
        }
        
        function setupEventListeners() {
            // Neuron drag and drop
            document.querySelectorAll('.neuron-item').forEach(item => {
                item.addEventListener('click', (e) => {
                    const type = item.dataset.type;
                    addNeuron(type, Math.random() * 400 + 100, Math.random() * 300 + 100);
                });
            });
            
            // Action buttons
            document.querySelectorAll('.action-item').forEach(item => {
                item.addEventListener('click', (e) => {
                    const action = item.dataset.action;
                    handleAction(action);
                });
            });
            
            // Toolbar buttons
            document.getElementById('zoomInBtn').onclick = () => graph?.zoomIn();
            document.getElementById('zoomOutBtn').onclick = () => graph?.zoomOut();
            document.getElementById('fitBtn').onclick = () => graph?.fit();
            document.getElementById('exportBtn').onclick = exportNetwork;
        }
        
        function addNeuron(type, x, y) {
            if (!wasmNetwork) return;
            
            // Add to WASM network
            const neuronId = wasmNetwork.add_neuron(x, y, type);
            console.log(\`🧠 Added \${type} neuron with ID: \${neuronId}\`);
            
            // Add to MaxGraph if available
            if (graph) {
                const { mxCell, mxGeometry } = window;
                const cell = new mxCell(type.charAt(0).toUpperCase(), new mxGeometry(x, y, 40, 40), 
                    \`shape=ellipse;fillColor=\${getColorForType(type)};strokeColor=#000000;fontColor=#FFFFFF;fontSize=14\`);
                cell.setVertex(true);
                
                graph.getModel().beginUpdate();
                try {
                    const addedCell = graph.addCell(cell);
                    maxGraphCells.set(neuronId, addedCell);
                } finally {
                    graph.getModel().endUpdate();
                }
            }
            
            updateStats();
        }
        
        function getColorForType(type) {
            switch(type) {
                case 'input': return '#4CAF50';
                case 'hidden': return '#2196F3';
                case 'output': return '#FF9800';
                default: return '#9E9E9E';
            }
        }
        
        function handleAction(action) {
            if (!wasmNetwork) return;
            
            switch(action) {
                case 'sample':
                    wasmNetwork.create_sample_network();
                    renderWasmNetwork();
                    break;
                case 'clear':
                    wasmNetwork.clear_network();
                    if (graph) {
                        graph.removeCells(graph.getChildVertices(graph.getDefaultParent()));
                    }
                    maxGraphCells.clear();
                    break;
                case 'animate':
                    startAnimation();
                    break;
                case 'orbital':
                    startOrbitalAnimation();
                    break;
            }
            
            updateStats();
        }
        
        function renderWasmNetwork() {
            if (!graph) return;
            
            const state = wasmNetwork.get_network_state();
            
            // Clear existing graph
            graph.removeCells(graph.getChildVertices(graph.getDefaultParent()));
            maxGraphCells.clear();
            
            // Add neurons
            const { mxCell, mxGeometry } = window;
            graph.getModel().beginUpdate();
            try {
                state.neurons.forEach(neuron => {
                    const cell = new mxCell(neuron.symbol, 
                        new mxGeometry(neuron.position.x, neuron.position.y, 40, 40), 
                        \`shape=ellipse;fillColor=\${neuron.color};strokeColor=#000000;fontColor=#FFFFFF;fontSize=14\`);
                    cell.setVertex(true);
                    const addedCell = graph.addCell(cell);
                    maxGraphCells.set(neuron.id, addedCell);
                });
                
                // Add connections
                state.connections.forEach(conn => {
                    const fromCell = maxGraphCells.get(conn.from_id);
                    const toCell = maxGraphCells.get(conn.to_id);
                    if (fromCell && toCell) {
                        const edge = graph.insertEdge(graph.getDefaultParent(), null, '', fromCell, toCell);
                        // Style based on weight
                        const style = conn.weight > 0 ? 'strokeColor=#4CAF50' : 'strokeColor=#F44336';
                        graph.setCellStyle(style, [edge]);
                    }
                });
            } finally {
                graph.getModel().endUpdate();
            }
        }
        
        function startAnimation() {
            if (animationId) cancelAnimationFrame(animationId);
            
            function animate() {
                if (wasmNetwork) {
                    wasmNetwork.animate_step(16.67); // ~60 FPS
                    updateStats();
                }
                animationId = requestAnimationFrame(animate);
            }
            animate();
        }
        
        function startOrbitalAnimation() {
            if (animationId) cancelAnimationFrame(animationId);
            
            function animate() {
                if (wasmNetwork) {
                    wasmNetwork.orbital_dance(Date.now());
                    renderWasmNetwork();
                }
                animationId = requestAnimationFrame(animate);
            }
            animate();
        }
        
        function updateStats() {
            if (!wasmNetwork) return;
            
            const state = wasmNetwork.get_network_state();
            document.getElementById('statsText').textContent = 
                \`Nodes: \${state.stats.total_neurons}  Edges: \${state.stats.total_connections}\`;
        }
        
        function exportNetwork() {
            if (!wasmNetwork) return;
            
            const state = wasmNetwork.get_network_state();
            const blob = new Blob([JSON.stringify(state, null, 2)], { type: 'application/json' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = 'neural-network.json';
            a.click();
            URL.revokeObjectURL(url);
        }
        
        // Initialize the app
        initializeApp();
    </script>
</body>
</html>`;
}
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="Content-Security-Policy" content="default-src 'none'; style-src 'unsafe-inline'; script-src 'nonce-${nonce}' https://unpkg.com;">
    <title>Neural Network Visualization</title>
    <script src="https://unpkg.com/@maxgraph/core@0.10.2/dist/maxgraph.min.js"></script>
    <style>
        body {
            margin: 0;
            padding: 0;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: var(--vscode-editor-background);
            color: var(--vscode-editor-foreground);
            display: flex;
            height: 100vh;
            overflow: hidden;
        }
        
        /* MaxGraph Sidebar */
        .maxgraph-sidebar {
            width: 240px;
            background-color: var(--vscode-sideBar-background);
            border-right: 1px solid var(--vscode-panel-border);
            overflow-y: auto;
            flex-shrink: 0;
        }
        
        .maxgraph-sidebar .sidebar-title {
            padding: 10px;
            font-size: 13px;
            font-weight: bold;
            color: var(--vscode-sideBarTitle-foreground);
            border-bottom: 1px solid var(--vscode-panel-border);
            background-color: var(--vscode-sideBarSectionHeader-background);
        }
        
        .maxgraph-sidebar .palette {
            border-bottom: 1px solid var(--vscode-panel-border);
        }
        
        .maxgraph-sidebar .palette-title {
            padding: 8px 10px;
            font-size: 12px;
            font-weight: bold;
            background-color: var(--vscode-sideBarSectionHeader-background);
            color: var(--vscode-sideBarSectionHeader-foreground);
            cursor: pointer;
            user-select: none;
        }
        
        .maxgraph-sidebar .palette-title:hover {
            background-color: var(--vscode-list-hoverBackground);
        }
        
        .maxgraph-sidebar .palette-content {
            padding: 5px;
            background-color: var(--vscode-sideBar-background);
        }
        
        .maxgraph-sidebar .palette-item {
            display: inline-block;
            margin: 3px;
            padding: 8px;
            border: 1px solid var(--vscode-panel-border);
            border-radius: 4px;
            background-color: var(--vscode-list-inactiveSelectionBackground);
            cursor: grab;
            text-align: center;
            min-width: 60px;
            font-size: 11px;
            transition: all 0.2s;
        }
        
        .maxgraph-sidebar .palette-item:hover {
            background-color: var(--vscode-list-hoverBackground);
            transform: scale(1.05);
        }
        
        .maxgraph-sidebar .palette-item:active {
            cursor: grabbing;
        }
        
        /* Main editor area */
        .maxgraph-main {
            flex: 1;
            display: flex;
            flex-direction: column;
            background-color: var(--vscode-editor-background);
        }
        
        .maxgraph-toolbar {
            height: 30px;
            background-color: var(--vscode-toolbar-background);
            border-bottom: 1px solid var(--vscode-panel-border);
            display: flex;
            align-items: center;
            padding: 0 8px;
            gap: 8px;
            flex-shrink: 0;
        }
        
        .maxgraph-toolbar button {
            background: var(--vscode-button-background);
            color: var(--vscode-button-foreground);
            border: none;
            padding: 4px 8px;
            border-radius: 3px;
            cursor: pointer;
            font-size: 11px;
            height: 22px;
        }
        
        .maxgraph-toolbar button:hover {
            background: var(--vscode-button-hoverBackground);
        }
        
        #graphContainer {
            flex: 1;
            background-color: var(--vscode-editor-background);
            position: relative;
            overflow: hidden;
        }
        
        .maxgraph-status {
            height: 22px;
            background-color: var(--vscode-statusBar-background);
            color: var(--vscode-statusBar-foreground);
            display: flex;
            align-items: center;
            padding: 0 8px;
            font-size: 11px;
            flex-shrink: 0;
            border-top: 1px solid var(--vscode-panel-border);
        }
        
        .status-right {
            margin-left: auto;
            display: flex;
            gap: 10px;
        }
        
        .connection-status {
            padding: 2px 6px;
            border-radius: 3px;
            font-size: 10px;
            font-weight: bold;
        }
        
        .connection-status.connected {
            background-color: #28a745;
            color: white;
        }
        
        .connection-status.disconnected {
            background-color: #dc3545;
            color: white;
        }
    </style>
</head>
<body>
    <!-- MaxGraph Sidebar -->
    <div class="maxgraph-sidebar" id="sidebar"></div>
    
    <!-- Main Editor -->
    <div class="maxgraph-main">
        <!-- Toolbar -->
        <div class="maxgraph-toolbar">
            <button id="zoomInBtn">🔍+</button>
            <button id="zoomOutBtn">🔍-</button>
            <button id="fitBtn">📐 Fit</button>
            <button id="exportBtn">📤 Export</button>
            <button id="connectBtn">🔗 Rust</button>
        </div>
        
        <!-- Graph Container -->
        <div id="graphContainer"></div>
        
        <!-- Status Bar -->
        <div class="maxgraph-status">
            <span id="statusText">MaxGraph Neural Network Editor Ready</span>
            <div class="status-right">
                <span id="nodeCount">Nodes: 0</span>
                <span id="edgeCount">Edges: 0</span>
                <span class="connection-status disconnected" id="connectionStatus">Disconnected</span>
            </div>
        </div>
    </div>

    <script nonce="${nonce}">
        // MaxGraph Neural Network Editor with proper Sidebar
        const { mxGraph, mxCell, mxGeometry, mxUtils, mxEvent, mxDragSource, mxCodec } = window;
        
        let graph = null;
        let sidebar = null;
        let neuronCounter = { input: 0, hidden: 0, output: 0 };

        // MaxGraph Sidebar implementation (based on GraphEditor pattern)
        function Sidebar(container) {
            this.container = container;
            this.palettes = {};
            this.init();
        }

        Sidebar.prototype.init = function() {
            this.container.innerHTML = \\\`
                <div class="sidebar-title">🧠 Neural Network Tools</div>
            \\\`;
            
            // Add neuron palette
            this.addPalette('neurons', 'Neurons', true, (content) => {
                this.addNeuronItems(content);
            });
            
            // Add network templates palette
            this.addPalette('networks', 'Networks', true, (content) => {
                this.addNetworkItems(content);
            });
            
            // Add actions palette
            this.addPalette('actions', 'Actions', false, (content) => {
                this.addActionItems(content);
            });
        };

        Sidebar.prototype.addPalette = function(id, title, expanded, onInit) {
            const palette = document.createElement('div');
            palette.className = 'palette';
            
            const header = document.createElement('div');
            header.className = 'palette-title';
            header.textContent = title;
            
            const content = document.createElement('div');
            content.className = 'palette-content';
            content.style.display = expanded ? 'block' : 'none';
            
            header.addEventListener('click', () => {
                const isVisible = content.style.display === 'block';
                content.style.display = isVisible ? 'none' : 'block';
            });
            
            palette.appendChild(header);
            palette.appendChild(content);
            this.container.appendChild(palette);
            
            this.palettes[id] = content;
            
            if (onInit) {
                onInit(content);
            }
        };

        Sidebar.prototype.addNeuronItems = function(container) {
            const neuronTypes = [
                { type: 'input', label: 'Input', color: '#4CAF50', symbol: 'I' },
                { type: 'hidden', label: 'Hidden', color: '#2196F3', symbol: 'H' },
                { type: 'output', label: 'Output', color: '#FF9800', symbol: 'O' }
            ];
            
            neuronTypes.forEach(neuron => {
                const item = this.createNeuronItem(neuron);
                container.appendChild(item);
            });
        };

        Sidebar.prototype.createNeuronItem = function(neuronConfig) {
            const item = document.createElement('div');
            item.className = 'palette-item';
            item.innerHTML = \\\`
                <div style="width: 24px; height: 24px; border-radius: 50%; background: \\\${neuronConfig.color}; 
                           color: white; display: flex; align-items: center; justify-content: center; 
                           font-weight: bold; font-size: 12px; margin: 0 auto 4px;">\\\${neuronConfig.symbol}</div>
                <div style="font-size: 10px;">\\\${neuronConfig.label}</div>
            \\\`;
            
            // Create MaxGraph drag source
            this.createDragSource(item, neuronConfig);
            
            return item;
        };

        Sidebar.prototype.createDragSource = function(element, config) {
            const dragSource = new mxDragSource(element, (graph, evt, cell, x, y) => {
                // Drop handler - create neuron at drop location
                return this.createNeuronCell(config, x, y);
            });
            
            dragSource.setGuidesEnabled(true);
        };

        Sidebar.prototype.createNeuronCell = function(config, x, y) {
            neuronCounter[config.type]++;
            const label = config.symbol + neuronCounter[config.type];
            
            // Create MaxGraph cell
            const cell = new mxCell(label, new mxGeometry(x - 25, y - 25, 50, 50), 
                'shape=ellipse;fillColor=' + config.color + ';strokeColor=white;strokeWidth=2;fontColor=white;fontSize=12;fontStyle=1');
            cell.setVertex(true);
            cell.setAttribute('neuronType', config.type);
            
            graph.addCell(cell);
            this.updateStats();
            
            return cell;
        };

        Sidebar.prototype.addNetworkItems = function(container) {
            const networkItems = [
                { id: 'sample', label: 'Sample\nNetwork', icon: '🔮' },
                { id: 'complex', label: 'Complex\nNetwork', icon: '🧠' }
            ];
            
            networkItems.forEach(item => {
                const element = document.createElement('div');
                element.className = 'palette-item';
                element.innerHTML = \\\`
                    <div style="font-size: 16px; margin-bottom: 4px;">\\\${item.icon}</div>
                    <div style="font-size: 9px; line-height: 1.2;">\\\${item.label}</div>
                \\\`;
                
                element.addEventListener('click', () => {
                    if (item.id === 'sample') this.createSampleNetwork();
                    if (item.id === 'complex') this.createComplexNetwork();
                });
                
                container.appendChild(element);
            });
        };

        Sidebar.prototype.addActionItems = function(container) {
            const actions = [
                { id: 'animate', label: 'Animate', icon: '⚡' },
                { id: 'orbital', label: 'Orbital\nDance', icon: '🌌' },
                { id: 'dlinoss', label: 'dLinOSS\nFlow', icon: '🪐' },
                { id: 'wavelet', label: 'Smart\nWavelets', icon: '🌊' },
                { id: 'consciousness', label: 'Send\nConsciousness', icon: '🧠' },
                { id: 'instrument', label: 'Instrument\nNetwork', icon: '📊' },
                { id: 'profile', label: 'Profile\nPerf', icon: '⚙️' },
                { id: 'clear', label :'Clear All', icon: '🧹' }
            ];
            
            actions.forEach(action => {
                const element = document.createElement('div');
                element.className = 'palette-item';
                element.innerHTML = \\\`
                    <div style="font-size: 16px; margin-bottom: 4px;">\\\${action.icon}</div>
                    <div style="font-size: 9px; line-height: 1.1;">\\\${action.label}</div>
                \\\`;
                
                element.addEventListener('click', () => {
                    if (action.id === 'animate') this.animateNetwork();
                    if (action.id === 'orbital') this.orbitalAnimation();
                    if (action.id === 'dlinoss') this.dLinOSSAnimation();
                    if (action.id === 'wavelet') this.sendSmartWavelets();
                    if (action.id === 'consciousness') this.sendConsciousnessWavelet();
                    if (action.id === 'instrument') this.instrumentNetwork();
                    if (action.id === 'profile') this.profileNetwork();
                    if (action.id === 'clear') this.clearNetwork();
                });
                
                container.appendChild(element);
            });
        };

        // 🌊 Send Smart Wavelets
        Sidebar.prototype.sendSmartWavelets = function() {
            console.log('🌊 Sending smart wavelets into dLinOSS...');
            
            const vertices = graph.getChildVertices(graph.getDefaultParent());
            const edges = graph.getChildEdges(graph.getDefaultParent());
            
            // Send different types of wavelets
            const waveletSequence = [
                { type: SmartWaveletSSM.messageTypes.NEURAL_STATE, payload: { nodeCount: vertices.length, edgeCount: edges.length }},
                { type: SmartWaveletSSM.messageTypes.TOPOLOGY_CHANGE, payload: { timestamp: Date.now() }},
                { type: SmartWaveletSSM.messageTypes.RESONANCE, payload: { frequency: 440 }},
                { type: SmartWaveletSSM.messageTypes.FLOW_PATTERN, payload: { direction: Math.random() * 360 }}
            ];
            
            waveletSequence.forEach((wave, index) => {
                setTimeout(() => {
                    SmartWaveletSSM.sendWavelet(wave.type, wave.payload);
                }, index * 800);
            });
            
            // Update status
            const statusText = document.getElementById('statusText');
            if (statusText) {
                statusText.textContent = 'Smart wavelets propagating through dLinOSS...';
                setTimeout(() => {
                    statusText.textContent = 'Smart wavelets learning complete';
                }, 4000);
            }
        };

        // 🧠 Send Consciousness Wavelet
        Sidebar.prototype.sendConsciousnessWavelet = function() {
            console.log('🧠 Sending consciousness wavelet...');
            
            const vertices = graph.getChildVertices(graph.getDefaultParent());
            const consciousnessPayload = {
                networkComplexity: vertices.length,
                timestamp: Date.now(),
                awareness: Math.random(),
                intention: 'dLinOSS_AWAKENING'
            };
            
            const consciousnessWavelet = SmartWaveletSSM.sendWavelet(
                SmartWaveletSSM.messageTypes.CONSCIOUSNESS, 
                consciousnessPayload
            );
            
            // Special consciousness visualization
            this.visualizeConsciousness(consciousnessWavelet);
            
            console.log('🧠 Consciousness wavelet sent with ID:', consciousnessWavelet.id);
        };

        // Visualize consciousness propagation
        Sidebar.prototype.visualizeConsciousness = function(wavelet) {
            const vertices = graph.getChildVertices(graph.getDefaultParent());
            const edges = graph.getChildEdges(graph.getDefaultParent());
            
            // Golden ratio spiral for consciousness
            const phi = (1 + Math.sqrt(5)) / 2;
            let angle = 0;
            
            vertices.forEach((vertex, index) => {
                setTimeout(() => {
                    // Golden spiral positioning effect
                    const radius = index * 5;
                    const spiralX = Math.cos(angle) * radius;
                    const spiralY = Math.sin(angle) * radius;
                    
                    // Consciousness glow effect
                    graph.setCellStyles('fillColor', '#FFD700', [vertex]); // Gold
                    graph.setCellStyles('strokeColor', '#FFF700', [vertex]); // Bright gold
                    graph.setCellStyles('strokeWidth', '4', [vertex]);
                    
                    // Create ripple effect on edges
                    const connectedEdges = graph.getEdges(vertex);
                    connectedEdges.forEach(edge => {
                        graph.setCellStyles('strokeColor', '#FFD700', [edge]);
                        graph.setCellStyles('strokeWidth', '3', [edge]);
                    });
                    
                    angle += (2 * Math.PI) / phi; // Golden angle
                    
                    // Fade back gradually
                    setTimeout(() => {
                        graph.setCellStyles('fillColor', vertex.getAttribute('neuronType') === 'input' ? '#4CAF50' : 
                                           vertex.getAttribute('neuronType') === 'hidden' ? '#2196F3' : '#FF9800', [vertex]);
                        graph.setCellStyles('strokeColor', 'white', [vertex]);
                        graph.setCellStyles('strokeWidth', '2', [vertex]);
                        
                        connectedEdges.forEach(edge => {
                            graph.setCellStyles('strokeColor', '#666666', [edge]);
                            graph.setCellStyles('strokeWidth', '2', [edge]);
                        });
                    }, 2000);
                    
                }, index * 150);
            });
        };
        
        // Initialize MaxGraph
        function initializeMaxGraph() {
            try {
                if (!window.mxGraph) {
                    console.log('⚠️ MaxGraph not loaded, using fallback visualization');
                    return;
                }
                
                // Create graph
                const container = document.getElementById('graphContainer');
                graph = new mxGraph(container);
                
                // Configure graph
                graph.setConnectable(true);
                graph.setAllowDanglingEdges(false);
                graph.setDisconnectOnMove(false);
                
                // Set background
                graph.getView().setBackgroundColor('#1e1e1e');
                graph.container.style.background = 'radial-gradient(circle, #333 1px, transparent 1px)';
                graph.container.style.backgroundSize = '20px 20px';
                
                // Create sidebar
                const sidebarContainer = document.getElementById('sidebar');
                sidebar = new Sidebar(sidebarContainer);
                
                // Initialize smart wavelet system
                SmartWaveletSSM.state.W_input = SmartWaveletSSM.initializeMatrix(16, 8);
                SmartWaveletSSM.state.W_hidden = SmartWaveletSSM.initializeMatrix(16, 16);
                SmartWaveletSSM.state.W_output = SmartWaveletSSM.initializeMatrix(8, 16);
                
                // Set up toolbar
                setupToolbar();
                
                console.log('✅ MaxGraph Neural Network Editor with Smart Wavelets initialized');
                
            } catch (error) {
                console.error('❌ MaxGraph initialization failed:', error);
                // Fallback initialization
                const container = document.getElementById('graphContainer');
                if (container) {
                    container.innerHTML = \\\`
                        <div style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); 
                                   text-align: center; color: var(--vscode-editor-foreground);">
                            <h3>⚠️ MaxGraph Loading...</h3>
                            <p>Smart Wavelet SSM System Ready</p>
                            <div style="margin-top: 20px; padding: 10px; background: rgba(40, 167, 69, 0.1); 
                                        color: #28a745; border-radius: 4px; font-size: 12px;">
                                🌊 Wavelets: \\\${Object.keys(SmartWaveletSSM.messageTypes).length} message types available
                            </div>
                        </div>
                    \\\`;
                }
            }
        }

        function setupToolbar() {
            document.getElementById('zoomInBtn').addEventListener('click', () => {
                if (graph) graph.zoomIn();
            });
            
            document.getElementById('zoomOutBtn').addEventListener('click', () => {
                if (graph) graph.zoomOut();
            });
            
            document.getElementById('fitBtn').addEventListener('click', () => {
                if (graph) graph.fit();
            });
            
            document.getElementById('exportBtn').addEventListener('click', () => {
                exportNetwork();
            });
            
            document.getElementById('connectBtn').addEventListener('click', () => {
                connectToRust();
            });
        }

        function exportNetwork() {
            if (!graph) return;
            
            try {
                const encoder = new mxCodec();
                const result = encoder.encode(graph.getModel());
                const xml = mxUtils.getXml(result);
                
                const blob = new Blob([xml], { type: 'application/xml' });
                const url = URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = 'neural-network-with-wavelets.xml';
                a.click();
                URL.revokeObjectURL(url);
            } catch (error) {
                console.error('Export failed:', error);
                alert('Export feature requires MaxGraph to be loaded');
            }
        }

        function connectToRust() {
            // Send connection wavelet
            SmartWaveletSSM.sendWavelet(SmartWaveletSSM.messageTypes.PING, {
                target: 'rust_profiler',
                timestamp: Date.now()
            });
            
            const status = document.getElementById('connectionStatus');
            status.textContent = 'Sending wavelets...';
            status.className = 'connection-status disconnected';
            
            setTimeout(() => {
                status.textContent = 'Wavelet Connected';
                status.className = 'connection-status connected';
            }, 1500);
        }
        
        // Initialize when page loads
        window.addEventListener('load', function() {
            console.log('🚀 MaxGraph Neural Network Editor loading...');
            initializeMaxGraph();
        });

        // Also try early initialization
        document.addEventListener('DOMContentLoaded', function() {
            console.log('🔥 DOM loaded, attempting early MaxGraph initialization...');
            setTimeout(() => {
                if (window.mxGraph) {
                    initializeMaxGraph();
                }
            }, 500);
        });
    </script>
</body>
</html>`;
}

// This method is called when your extension is deactivated
export function deactivate() {}
